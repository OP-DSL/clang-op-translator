//------------------------------
#include "AppFileRefactoringTool.hpp"
#include "core/clang_op_translator_core.h"
#include "core/utils.h"
#include "geneareKernels.h"
#include "op-check.hpp"
//-----------------------------

static llvm::cl::OptionCategory OpCategory("OP-DSL Options");
static llvm::cl::extrahelp
    CommonHelp(clang::tooling::CommonOptionsParser::HelpMessage);
static llvm::cl::opt<op_dsl::OPTargets> opTarget(
    "optarget",
    llvm::cl::desc("Available versions to be generated by the translator:"),
    llvm::cl::init(op_dsl::all), llvm::cl::cat(OpCategory),
    llvm::cl::values(
        clEnumValN(op_dsl::all, "all", "All possible versions [default]"),
        clEnumValN(op_dsl::none, "none", "Don't generate kernel files"),
        clEnumValN(op_dsl::seq, "seq", "Sequential"),
        clEnumValN(op_dsl::openmp, "openmp", "OpenMP"),
        clEnumValN(op_dsl::cuda, "cuda", "CUDA"),
        clEnumValN(op_dsl::vec, "vec", "Vectorization")));
static llvm::cl::opt<op_dsl::Staging> staging(
    "staging", llvm::cl::desc("Sets the staging and coloring type for cuda."),
    llvm::cl::init(op_dsl::OP_STAGE_ALL), llvm::cl::cat(OpCategory),
    llvm::cl::values(
        clEnumValN(op_dsl::OP_STAGE_ALL, "op_stage_all",
                   "Use hierarchical coloring with staging [default]"),
        clEnumValN(op_dsl::OP_COlOR2, "op_color2", "Use global coloring")));
static llvm::cl::opt<bool>
    SOA("soa",
        llvm::cl::desc("Enable AoS to SoA transformation default: false"),
        llvm::cl::init(false), llvm::cl::cat(OpCategory));
static llvm::cl::opt<op_dsl::DSL> dslFlag(
    "dsl", llvm::cl::desc("Available supported DSLs to use by the translator:"),
    llvm::cl::init(op_dsl::OP2), llvm::cl::cat(OpCategory),
    llvm::cl::values(clEnumValN(op_dsl::OP2, "op2", "OP2 [default]"),
                     clEnumValN(op_dsl::OPS, "ops", "OPS")));

const op_dsl::DSL dsl = dslFlag.getValue();

int main(int argc, const char **argv) {
  using clang::tooling::CommonOptionsParser;
  // Initialize the tool
  CommonOptionsParser OptionsParser(argc, argv, OpCategory);

  op_dsl::OPApplication application;
  // TODO add another way to initialize the application
  // Parse the application files, build model
  if (op_dsl::CheckTool parserTool(OptionsParser, application);
      int err = parserTool.setFinderAndRun()) {
    return err;
  }

  // TODO sourcepathlist from app..
  op_dsl::AppFileRefactoringTool applicationRefactor(OptionsParser,
                                                     application);
  if (int err = applicationRefactor.generateOPFiles()) {
    return err;
  }
  applicationRefactor.writeOutReplacements();

  op_dsl::OPOptimizations optim{staging.getValue(), SOA.getValue()};

  // Generate and write target specific kernel files.
  if (int err = generateKernelFiles(optim, opTarget.getValue(), OptionsParser,
                                    application, dsl)) {
    return err;
  }

  //___________________
  /*
  OP2::OP2RefactoringTool Tool(args, Compilations, OptionsParser,
                               opTarget.getValue(), optim);

  */
  return 0;
}
